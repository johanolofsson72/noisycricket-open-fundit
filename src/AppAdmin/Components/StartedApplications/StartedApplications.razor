@using System.Diagnostics
@using System.Text.RegularExpressions
@using AppAdmin.Resources
@using AppAdmin.State
@using EasyCaching.Core
@using global::Shared.Events.Services
@using Microsoft.CodeAnalysis.Elfie.Serialization

@inject NavigationManager NavigationManager
@inject ApplicationService ApplicationService
@inject IConfiguration Configuration
@inject NotificationService NotificationService
@inject ProjectService ProjectService
@inject UserService UserService
@inject DocumentService DocumentService
@inject SharedService SharedService
@inject EventService EventService
@inject IEasyCachingProvider Cache

<style>
    .k-animation-container {
        z-index: 15000 !important;
    }

    .droppis .k-animation-container {
        z-index: 15000 !important;
    }

    .droppis {
        z-index: 15000 !important;
    }
</style>

<h5>@LocalizationService.StringFromResource("StartedApplications-1")</h5>
<p>@LocalizationService.StringFromResource("StartedApplications-2")</p>

<Spacer Height="5px" />
<div width="100%" style="display: flex; flex-direction: row; justify-content: flex-end;">
    <SecondaryButton OnClick="Refresh">
        <i class="fas fa-sync"></i> <!-- Exempel för FontAwesome -->
    </SecondaryButton>
</div>
<Spacer Height="10px" />
<TelerikGrid Data="ApplicationList" Context="item" Reorderable="true" Resizable="true" Pageable="true" PageSize="12" @ref="GridRef"
                 EditMode="@GridEditMode.Popup" 
                 OnDelete="@OnGridDelete"
                 ConfirmDelete="true">
    <GridSettings>
        <GridPopupEditSettings Title="@LocalizationService.StringFromResource("StartedApplications-8")" 
                               MaxWidth="80vw"
                               MaxHeight="80vh"
                               Class="custom-popup">
        </GridPopupEditSettings>
        <GridPopupEditFormSettings Orientation="@FormOrientation.Horizontal"
                                   ButtonsLayout="FormButtonsLayout.Center" 
                                   ColumnSpacing="50px"
                                   Columns="4">
            <FormTemplate>
                @{
                    EditItem = context.Item as GridApplicationDto ?? new GridApplicationDto();
                    
                    <StartedApplication ApplicationId="@EditItem.Id" />

                }
            </FormTemplate>
        </GridPopupEditFormSettings>
    </GridSettings>
    <GridColumns>
        <GridColumn Title="@LocalizationService.StringFromResource("StartedApplications-15")" Width="350px">
            <Template>
                @{
                    var item = (GridApplicationDto)context;
                    var title = Regex.Unescape(item.Title);
                    if (title.Length > 45)
                    {
                        <span>@title.Substring(0, 45) ...</span>
                    }
                    else
                    {
                        <span>@title</span>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn Title="@LocalizationService.StringFromResource("StartedApplications-9")" Field=@nameof(ApplicationDto.UpdatedDate) DisplayFormat="{0:yyyy-MM-dd}" Width="140px" />
        <GridColumn Title="@LocalizationService.StringFromResource("StartedApplications-10")" Field=@nameof(ApplicationDto.SchemaNames)>
            <Template>
                @{
                    var index = SharedService.IndexByCulture();
                    var item = (GridApplicationDto)context;
                    <span>@item.SchemaNames[index]</span>
                }
            </Template>
        </GridColumn>
        <GridColumn Title="@LocalizationService.StringFromResource("StartedApplications-11")" Field=@nameof(ApplicationDto.Organization.Name)>
            <Template>
                @{
                    var item = (GridApplicationDto)context;
                    if (item.OrganizationName is not null)
                    {
                        <span>@item.OrganizationName</span>
                    }
                    else
                    {
                        <span>@LocalizationService.StringFromResource("StartedApplications-12")</span>
                    }
                }
            </Template>
        </GridColumn>
        <GridCommandColumn Context="item" Width="300px">
            @{
                var x = (GridApplicationDto)item;
                <GridCommandButton Enabled="@Enabled" OnClick="() => OnManuallyImportApplication(x)" Icon="@SvgIcon.Save" ThemeColor="@ThemeConstants.Button.ThemeColor.Success">@LocalizationService.StringFromResource("StartedApplications-16")</GridCommandButton>
            }
            <GridCommandButton Enabled="@Enabled" Command="Edit" Icon="@SvgIcon.Eye" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">@LocalizationService.StringFromResource("StartedApplications-13")</GridCommandButton>
            <GridCommandButton Enabled="@Enabled" Command="Delete" Icon="@SvgIcon.Trash" ThemeColor="@ThemeConstants.Button.ThemeColor.Error">@LocalizationService.StringFromResource("StartedApplications-14")</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code
{
    [CascadingParameter] public required AppState AppState { get; set; }
    [CascadingParameter] public required Action<bool> ChangeLoaderVisibilityAction { get; set; }
    private TelerikGrid<GridApplicationDto> GridRef { get; set; } = default!;
    private List<GridApplicationDto> ApplicationList { get; set; } = default!;
    private GridApplicationDto EditItem { get; set; } = default!;
    private int OrganizationId { get; set; }
    private int UserId { get; set; }
    private bool Enabled { get; set; } = true;
    
    protected override async Task OnInitializedAsync()
    {
        await Load();  
    }

    private async Task Load()
    {
        UserId = AppState.User.Id;
        OrganizationId = AppState.Organization.Id;
        
        var result = await ApplicationService.GridApplicationByStatusAsync(2);
        if (!result.IsOk) return;
        
        ApplicationList = result.Value.OrderByDescending(x => x.UpdatedDate).ToList();
        NotificationService.Info(@LocalizationService.StringFromResource("StartedApplications-3") + $" {ApplicationList.Count} " + @LocalizationService.StringFromResource("StartedApplications-4"), 2000);
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnGridDelete(GridCommandEventArgs args)
    {
        var item = args.Item as GridApplicationDto;

        if (item is null) return;
        
        Enabled = false;
        ChangeLoaderVisibilityAction(true);
        await InvokeAsync(StateHasChanged);

        var deleteApplicationResult = await ApplicationService.DeleteApplicationAsync(item.Id, new CancellationToken());
        if (!deleteApplicationResult.IsOk)
        {
            NotificationService.Error(@LocalizationService.StringFromResource("StartedApplications-5"));
        
            Enabled = true;
            ChangeLoaderVisibilityAction(false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        var deleteStateResult = await ApplicationService.DeleteApplicationStateAsync(OrganizationId, UserId, item.Id, new CancellationToken());
        if (!deleteStateResult.IsOk)
        {
            NotificationService.Error(@LocalizationService.StringFromResource("StartedApplications-6"));
        
            Enabled = true;
            ChangeLoaderVisibilityAction(false);
            await InvokeAsync(StateHasChanged);
            return;
        }

        NotificationService.Success(@LocalizationService.StringFromResource("StartedApplications-7"));

        await Load();
        
        Enabled = true;
        ChangeLoaderVisibilityAction(false);
        await InvokeAsync(StateHasChanged);

    }

    private async Task OnManuallyImportApplication(GridApplicationDto gridApplication)
    {
        
        Enabled = false;
        ChangeLoaderVisibilityAction(true);
        await InvokeAsync(StateHasChanged);
        
        var w = new Stopwatch();
        var t = new Stopwatch();
        var result = await ApplicationService.ImportStartedApplicationAsync(gridApplication.Id, new CancellationToken());
        if (!result.IsOk)
        {
            NotificationService.Error(result.Error.Message);
        
            Enabled = true;
            ChangeLoaderVisibilityAction(false);
            await InvokeAsync(StateHasChanged);
            return;
        }
        Console.WriteLine($@"ImportStartedApplicationAsync: {w.ElapsedMilliseconds} ms");
        var s = new Stopwatch();
        
        // Event: 1 Ansökan görs av Producent eller någon hos produktionsbolaget, fast i detta fallet direkt av admin
        var ev = await EventService.TriggerNextEventById(gridApplication.Id, 1, new CancellationToken());
        if (!ev.IsOk)
        {
            NotificationService.Error(ev.Error.Message, 30000);
        
            Enabled = true;
            ChangeLoaderVisibilityAction(false);
            await InvokeAsync(StateHasChanged);
            return;
        }
        
        Console.WriteLine($@"TriggerNextEvent: {s.ElapsedMilliseconds} ms");
        
        Console.WriteLine($@"ManuallyImportApplication: {t.ElapsedMilliseconds} ms");
        
        NavigationManager.NavigateTo($"/applications/{gridApplication.Id}");
        
        Enabled = false;
        ChangeLoaderVisibilityAction(false);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCancel()
    {
        await ExitEditAsync();
    }

    private async Task ExitEditAsync()
    {
        if (GridRef is null) return;

        var state = GridRef.GetState();

        if (state is null) return;
        
        Enabled = false;
        ChangeLoaderVisibilityAction(true);
        await InvokeAsync(StateHasChanged);

        state.OriginalEditItem = null!;
        state.EditItem = null!;
        state.InsertedItem = null!;

        await GridRef.SetStateAsync(state);
        
        Enabled = true;
        ChangeLoaderVisibilityAction(false);
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task Refresh()
    {
        await Cache.RemoveByPrefixAsync("Applications", CancellationToken.None);        
        await Cache.RemoveByPrefixAsync("Projects", CancellationToken.None);
        NavigationManager.NavigateTo("started-applications", true);
    }
}