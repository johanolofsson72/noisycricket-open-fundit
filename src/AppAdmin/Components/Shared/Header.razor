@using System.Text.Json
@using AppAdmin.State
@using EasyCaching.Core
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@using SQLitePCL
@rendermode @(new InteractiveServerRenderMode(false))
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IWebHostEnvironment Environment
@inject IJSRuntime JSRuntime

<style>
    .search{
        width: 100%;
        height: 34px;
        border-radius: 5px;
        border: 1px solid #ccc;
        padding: 5px;
    }
    .search-button{
        height: 34px;
    }
    .clear-btn-absolute {
        position: absolute;
        right: 47px; /* närmare Sök-knappen */
        top: 1px;
        background: #fff;
        border: 0px solid #ccc;
        border-radius: 5px;
        color: #666;
        font-size: 13px;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
        z-index: 10;
        transition: all 0.2s ease;
    }

    .clear-btn-absolute:hover {
        background: #f3f3f3;
        color: #000;
        border-color: #999;
    }

    .e-speech-to-text.e-btn.e-round {
        width: 34px;
        height: 34px;
    }
    .e-speech-to-text.e-btn {
        min-width: 34px;
        min-height: 34px;
    }
</style>

<header class="border-b border-gray-200 dark:border-gray-800 pr-3">
    <div class="flex flex-wrap items-center">
        <div style="display: flex; flex-direction: row; width: 55%; height: 44px; margin-left: 305px; margin-top: 10px;">
            <AuthorizeView Policy="Admin">
                <Authorized>
                    <div style="position: relative; width: 100%;">
                        <TelerikTextBox Class="search"
                                        @bind-Value="@SearchPhrase"
                                        Placeholder="@LocalizationService.StringFromResource("Header-1")"
                                        ShowPrefixSeparator="false"
                                        ShowSuffixSeparator="false">
                            <TextBoxPrefixTemplate>
                                <TelerikSvgIcon Icon="@SvgIcon.Search"></TelerikSvgIcon>
                            </TextBoxPrefixTemplate>
                            <TextBoxSuffixTemplate>
                                <TelerikButton Class="search-button"
                                               FillMode="@ThemeConstants.Button.FillMode.Flat"
                                               OnClick="SearchChanged"
                                               ButtonType="ButtonType.Button">
                                    @LocalizationService.StringFromResource("Header-2")
                                </TelerikButton>
                            </TextBoxSuffixTemplate>
                        </TelerikTextBox>

                        @if (!string.IsNullOrWhiteSpace(SearchPhrase))
                        {
                            <button class="clear-btn-absolute"
                                    type="button"
                                    title="Rensa"
                                    @onclick:preventDefault
                                    @onclick:stopPropagation
                                    @onclick="ClearText">
                                <i class="fas fa-times"></i>
                            </button>
                        }
                    </div>


                    <div class="d-flex align-items-center gap-2 ml-2">
                        <SfSpeechToText
                            @ref="@speechToTextRef"
                            @bind-Transcript="Transcript"
                            ButtonSettings="@ButtonSettings"
                            CssClass="custom-speech-btn"
                            Language="@Language"
                            ShowTooltip="false"
                            AllowInterimResults="true"
                            SpeechRecognitionStarted="@onListeningStart"
                            SpeechRecognitionStopped="@onListeningStop"
                            SpeechRecognitionError="@OnError"
                            TranscriptChanging="@(args => OnInput(args.Transcript))">
                        </SfSpeechToText>
                    </div>

                    <div style="width: 20px;"></div>
                    @if (Environment.IsEnvironment("Demo"))
                    {
                        <div style="font-size: xx-small">This a public demo and all AI stuff & advanced stuff is disabled</div>
                    }
                    <div style="margin-top: 2px; display: none;">
                        <TelerikSwitch Width="140px" Value="@(AmountOfResult == 50)" OnLabel="@LocalizationService.StringFromResource("Header-5")" OffLabel="@LocalizationService.StringFromResource("Header-6")" ValueChanged="@((bool val) => AmountChangedHandlerAsync(val))"></TelerikSwitch>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="flex flex-grow flex-shrink flex-nowrap justify-end items-center">
            <nav class="relative flex flex-grow">
                <ul class="flex flex-wrap items-center justify-end w-full m-0">
                    <AuthorizeView>
                        <Authorized>
                            <li>
                                <div class="mx-3 relative">
                                    <div>
                                        <a href="Account/Manage"
                                            class="max-w-xs bg-white dark:bg-black rounded-full flex items-center text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 lg:p-2 lg:rounded-md lg:hover:bg-gray-50 dark:lg:hover:bg-gray-900 dark:ring-offset-black" id="user-menu-button" aria-expanded="false" aria-haspopup="true">
                                            <span class="hidden ml-3 text-gray-700 dark:text-gray-300 text-sm font-medium lg:block">
                                                <span class="sr-only">Open user menu for </span>
                                                @AppState?.User.FullName
                                            </span>
                                        </a>
                                    </div>
                                </div>
                            </li>
                            <li class="mr-3 relative flex flex-wrap just-fu-start m-0">
                                <form action="Account/Logout" method="post">
                                    <AntiforgeryToken/>
                                    <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
                                    <SecondaryButton type="submit">
                                        @LocalizationService.StringFromResource("Header-3")
                                    </SecondaryButton>
                                </form>
                            </li>
                        </Authorized>
                        <Authorizing>
                            <li class="relative flex flex-wrap just-fu-start m-0">
                                <NavLink href="/Account/Login" class="m-2 mr-4">
                                    <SecondaryButton>
                                        @LocalizationService.StringFromResource("Header-4")
                                    </SecondaryButton>
                                </NavLink>
                            </li>
                        </Authorizing>
                        <NotAuthorized>
                            <li class="relative flex flex-wrap just-fu-start m-0">
                                <NavLink href="/Account/Login" class="m-2 mr-4">
                                    <SecondaryButton>
                                        @LocalizationService.StringFromResource("Header-4")
                                    </SecondaryButton>
                                </NavLink>
                            </li>
                        </NotAuthorized>
                    </AuthorizeView>

                    <li class="relative flex flex-wrap just-fu-start m-0">
                        <DarkModeToggleLite/>
                    </li>

                </ul>
            </nav>
        </div>
    </div>
</header>

@code {
    [CascadingParameter] public required AppState AppState { get; set; }
    private string? currentUrl;
    private string SearchPhrase { get; set; } = string.Empty;
    private int AmountOfResult { get; set; } = 50;
    private string Transcript = String.Empty;
    //private bool AllowInterimResults = true;
    //private bool ShowTooltip = true;
    //private bool ShowIconWithText = false;
    private bool IsSupportedBrowser = true;
    //private string CssClass = "";
    private string Language = Thread.CurrentThread.CurrentUICulture.Name;
    private Syncfusion.Blazor.Inputs.SfSpeechToText? speechToTextRef;
    
    private Syncfusion.Blazor.Inputs.SpeechToTextButtonSettings ButtonSettings = new Syncfusion.Blazor.Inputs.SpeechToTextButtonSettings
    {
        Text = "",
        StopStateText = ""
    };
    
    protected override void OnInitialized()
    {
        Language = Thread.CurrentThread.CurrentUICulture.Name;
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task SearchChanged(object obj)
    {
        if (speechToTextRef is not null)
        {
            await speechToTextRef.StopListeningAsync();
        }
        NavigationManager.NavigateTo("projects?SearchPhrase=" + SearchPhrase + "&AmountOfResult=" + AmountOfResult, false);
    }

    private void AmountChangedHandlerAsync(bool value)
    {
        AmountOfResult = value ? 50 : 1000;
    }
    
    
    
    
    private void OnInput(string text)
    {
        SearchPhrase = text;
    }

    private void onListeningStart()
    {
        SearchPhrase = "";
        Transcript = "";
        if (IsSupportedBrowser && !string.IsNullOrEmpty(SearchPhrase))
            SearchPhrase += '\n';
    }

    private void onListeningStop()
    {
        // Stop-logik om behövs
    }

    private void OnError(SpeechRecognitionErrorEventArgs args)
    {
        if (args.Error == "unsupported-browser")
            IsSupportedBrowser = false;
    }

    private async Task ClearText()
    {
        SearchPhrase = "";
        Transcript = "";
        if (speechToTextRef is not null)
        {
            await speechToTextRef.StopListeningAsync();
        }
    }

}
