@using AppAdmin.State

@inject ApplicationService ApplicationService
@inject SharedService SharedService

<style>
    .checklist {
        width: 100%;
        height: 100%;
        padding: 20px;
        background-color: #fff;
        padding-bottom: 30px;
        position: relative; /* Behöver för absolut placering av knappen */
    }

    .checklist h2 {
        text-align: center;
        font-size: 14px;
        margin-bottom: 20px;
        color: #333;
    }

    .checklist ul {
        list-style: none;
        padding: 0;
    }

    .checklist li {
        display: flex;
        align-items: center;
        padding: 5px 0;
        font-size: 12px;
        border-bottom: 1px dashed #ddd; /* Ser ut som ett anteckningsblock */
    }

    .checklist li:last-child {
        border-bottom: none;
    }

    .checklist input[type="checkbox"] {
        margin-right: 10px;
        width: 10px;
        height: 10px;
    }

    .checklist label {
        cursor: pointer;
    }

    .checklist input[type="checkbox"]:checked + label {
        text-decoration: line-through; /* Stryker över text när checkbox är checkad */
        color: #999;
    }

    .close-btn {
        width: 80px;
        padding: 8px 0;
        position: sticky; /* Använd sticky position */
        bottom: 20px; /* Avstånd från botten av behållaren */
        left: 50%;
        transform: translateX(-50%); /* Centrerar knappen horisontellt */
    }

    .close-btn:hover {
        background-color: #30429f; /* Darker color on hover */
    }
    
</style>

@if (SelectedApplication is not null)
{
    <div class="checklist">
        <h2>@LocalizationService.StringFromResource("Projects-152")</h2>
        <ul>
            <TelerikListView Data="ListViewValue" @ref="@ListViewRef">
                <Template>
                    @{
                        if (context.StatusId == 16)
                        {
                            <li><input disabled type="checkbox" id="task1" checked><label for="task1">@(context.Labels[SharedService.IndexByCulture()])</label></li>
                        }
                        else
                        {
                            <li><input disabled type="checkbox" id="task1"><label for="task1">@(context.Labels[SharedService.IndexByCulture()])</label></li>
                        }
                    }
                </Template>
            </TelerikListView>
        </ul>
        <br/><br/>
        <TelerikButton Class="close-btn" ThemeColor="@ThemeConstants.SvgIcon.ThemeColor.Primary" @onclick="() => OnClose.InvokeAsync()">@LocalizationService.StringFromResource("Grid_DialogClose")</TelerikButton>
        <br/>
        </div>
}

@code 
{
    [CascadingParameter] public required AppState AppState { get; set; }
    [Parameter] public int ApplicationId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private ApplicationDto? SelectedApplication { get; set; }
    private TelerikListView<ApplicationEventDto> ListViewRef { get; set; } = new();
    private List<ApplicationEventDto> ListViewValue { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await ApplicationService.ApplicationByIdAsync(ApplicationId, new CancellationToken());
        if (result.IsOk) SelectedApplication = result.Value;

        ListViewValue = SelectedApplication!.Events.DistinctBy(x => x.Labels[0]).ToList();
    }

}