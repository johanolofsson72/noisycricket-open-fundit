@using System.Net
@using System.Text.Json
@using System.Text.RegularExpressions
@using global::Shared.Documents.DTOs
@using Org.BouncyCastle.Crmf
@using Telerik.Windows.Documents.Common.FormatProviders
@using Telerik.Windows.Documents.Flow.FormatProviders.Docx
@using Telerik.Windows.Documents.Flow.FormatProviders.Html
@using Telerik.Windows.Documents.Flow.FormatProviders.Rtf
@using Telerik.Windows.Documents.Flow.FormatProviders.Txt
@using Telerik.Windows.Documents.Flow.Model
@inject SharedService SharedService
@inject IJSRuntime JsRuntime
@inject NotificationService NotificationService
@inject DocumentService DocumentService

<div class="application-segment">
    @if (Control.ControlTypeId == 15)
    {
        <label class="application-category-header">@Control.Labels[Index]</label>
    }
    else if (Value == "saknas")
    {
        <label for="@Control.Id.ToString()" class="application-label">@Control.Labels[Index]<br/>
            <label Id="@Control.Id.ToString()" class="application-missing-label">@Value</label>
        </label>
    }
    else if (Control.ControlTypeId == 13)
    {
        <label for="@Control.Id.ToString()" class="application-label">@Control.Labels[Index]<br/>
            @foreach(var link in Links)
            {
                <div class="application-summary-label" @onclick="@(() => DownloadThis(link))" style='cursor: pointer;'>@link</div><br/>
            }
        </label>
    }
    else
    {
        <label for="@Control.Id.ToString()" class="application-label">@Control.Labels[Index]<br/>
            <label Id="@Control.Id.ToString()" class="application-summary-label">@Value</label>
        </label>
    }
</div>

@code {
    [Parameter] public int ApplicationId { get; set; } = 0;
    [Parameter] public ApplicationControlDto Control { get; set; } = new();
    private string Value { get; set; } = string.Empty;
    private List<string> Links { get; set; } = [];
    private int Index { get; set; } = 0;
    private bool Enabled { get; set; } = true;

    protected override void OnInitialized()
    {
        try
        {
            Index = SharedService.IndexByCulture();
            if (Control.Labels.Count == 1) Index = 0;
            Control.Value = Regex.Unescape(Control.Value);
            switch (Control.ControlTypeId)
            {
                case 2:
                    Value = Control.Value;
                    break;
                case 3:
                    Value = Control.Value;
                    break;
                case 4:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var val = decimal.Parse(Control.Value);
                        Value = val.ToString("#,##0.00");
                    }
                    break;
                case 5:
                    Value = Control.Value;
                    break;
                case 6:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        try
                        {
                            var val = bool.Parse(Control.Value);
                            Value = val ? @LocalizationService.StringFromResource("Applications-21") : @LocalizationService.StringFromResource("Applications-20");
                        }
                        catch
                        {
                            Value = @LocalizationService.StringFromResource("Applications-20");
                        }
                    }
                    break;
                case 7:
                    Value = Control.Value;
                    break;
                case 8:
                    Value = Control.Value;
                    break;
                case 9:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var value = string.Empty;
                        var list = JsonSerializer.Deserialize<List<ListboxNameEmailAgeDto>>(Control.Value);
                        if (list != null)
                        {
                            foreach (var item in list)
                            {
                                value += $"{item.Name}, {item.Email}, {item.Age}\n";
                            }
                            value = value.TrimEnd('\n');
                        }

                        Value = value;
                    }
                    break;
                case 10:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var value = string.Empty;
                        var list = JsonSerializer.Deserialize<List<ListboxDaysLocationDto>>(Control.Value);
                        if (list != null)
                        {
                            foreach (var item in list)
                            {
                                value += $"{item.Days}, {item.Location}\n";
                            }
                            value = value.TrimEnd('\n');
                        }

                        Value = value;
                    }
                    break;
                case 11:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var value = string.Empty;
                        var list = JsonSerializer.Deserialize<List<ListboxNamePricesReceivedAttendedDto>>(Control.Value);
                        if (list != null)
                        {
                            foreach (var item in list)
                            {
                                value += $"{item.Name}, {item.Prices}, {item.Attended}\n";
                            }
                            value = value.TrimEnd('\n');
                        }

                        Value = value;
                    }
                    break;
                case 12:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var value = string.Empty;
                        var list = JsonSerializer.Deserialize<List<ListboxNameEmailPhonenumberGenderDto>>(Control.Value);
                        if (list != null)
                        {
                            foreach (var item in list)
                            {
                                value += $"{item.Name}, {item.Email}, {item.Phonenumber}, {item.Gender}\n";
                            }
                            value = value.TrimEnd('\n');
                        }

                        Value = value;
                    }
                    break;
                case 13:
                    // UploadSegment
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var files = JsonSerializer.Deserialize<List<UploadFileInfo>>(Control.Value);
                        if (files != null)
                        {
                            foreach (var file in files)
                            {
                                Links.Add(file.Name);
                            }
                        }

                        Value = "files";
                    }
                    
                    
                    /*if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        Links = [];
                        var value = string.Empty;
                        var list = JsonSerializer.Deserialize<List<UploadFileInfo>>(Control.Value);
                        if (list != null)
                        {
                            foreach (var item in list)
                            {
                                value += $"{Path.GetFileName(WebUtility.UrlDecode(item.Name).Replace('\\','/'))}\n";
                                Links.Add(item.Name);
                            }
                            value = value.TrimEnd('\n');
                        }

                        Value = value;
                    }*/
                    break;
                case 14:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var value = string.Empty;
                        var list = JsonSerializer.Deserialize<List<ListboxNameGenderDto>>(Control.Value);
                        if (list != null)
                        {
                            foreach (var item in list)
                            {
                                value += $"{item.Name}, {item.Gender}\n";
                            }
                            value = value.TrimEnd('\n');
                        }

                        Value = value;
                    }
                    break;
                case 15:
                    Value = string.Empty;
                    break;
                case 16:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var val = DateTime.Parse(Control.Value);
                        Value = val.ToString("yyyy-MM-dd");
                    }
                    break;
                case 17:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        Value = Control.Value.Replace(":", " " + @LocalizationService.StringFromResource("HourMinuteNumericTextboxSegment-2") + " ") + " " + @LocalizationService.StringFromResource("HourMinuteNumericTextboxSegment-3");
                    }
                    break;
                case 18:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var dates = Control.Value.Split(";");
                        if (dates.Length == 2)
                        {
                            var start = DateTime.Parse(dates[0]);
                            var end = DateTime.Parse(dates[1]);
                            Value = $"{start:yyyy-MM-dd} - {end:yyyy-MM-dd}";
                        }
                    }
                    break;
                case 1_000_000:
                    if (!string.IsNullOrWhiteSpace(Control.Value))
                    {
                        var val = decimal.Parse(Control.Value);
                        Value = Math.Round(val, 2) + " %";
                    }
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            if (string.IsNullOrEmpty(Value))
            {
                Value = @LocalizationService.StringFromResource("Applications-11");
            }
            else
            {
                Value = WebUtility.HtmlDecode(Value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("ReadonlySegment: " + ex);
        }
    }
    
    private async Task DownloadThis(string fileName)
    {
        try
        {
            var result = await DocumentService.DocumentsByApplicationIdAndFileNameAsync(ApplicationId, fileName, CancellationToken.None);
            
            if (!result.IsOk) return;

            var document = result.Value.First();
            
            if (document is { Path: "", Binary.Length: > 0 })
            {
                var documentContent = Encoding.UTF8.GetString(document.Binary, 0, document.Binary.Length);
                await ExportToPdf(documentContent, document.FileName);
            }
            else if (!System.IO.File.Exists(document.Path))
            {
                return;
            }
            else if (document is not { Path: "" })
            {
                var fileStream = System.IO.File.OpenRead(document.Path);
                using var streamRef = new DotNetStreamReference(stream: fileStream);
                await JsRuntime.InvokeVoidAsync("downloadFileFromStream", document.FileName, streamRef);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    
    private async Task ExportToPdf(string content, string fileName)
    {
        // ensure that table cells have inline border styles and are visible in the exported document
        content = content.Replace("<td>", "<td style=\"border:1px solid #ccc;\">");
        // call the export service, it will discern the details based on the extension of the exported file we want
        bool isSuccess = await ExportAndDownloadHtmlContent(content, fileName);
        // in case here was an issue
        if (isSuccess == false)
        {
            NotificationService.Error("error converting to pdf");
        }
    }
    
    private async Task<bool> ExportAndDownloadHtmlContent(string htmlContent, string fileName)
    {
        try
        {
            // prepare a document with the HTML content that we can use for conversion
            var provider = new HtmlFormatProvider();
#pragma warning disable CS0618 // Type or member is obsolete
            var document = provider.Import(htmlContent);
#pragma warning restore CS0618 // Type or member is obsolete

            // get the provider to export and then download the file
            var exportProvider = ExportFormatProvider(fileName, out var mimeType);
            byte[] exportFileBytes = null!;
            using (var ms = new MemoryStream())
            {
#pragma warning disable CS0618 // Type or member is obsolete
                exportProvider.Export(document, ms);
#pragma warning restore CS0618 // Type or member is obsolete
                exportFileBytes = ms.ToArray();
            }

            // download the file in the browser
            await FileDownloader.Save(JsRuntime, exportFileBytes, mimeType, fileName);
        }
        catch
        {
            return false;
        }
        return true;
    }
    
    private IFormatProvider<RadFlowDocument> ExportFormatProvider(string fileName, out string mimeType)
    {
        // we get both the provider and the MIME type to use only one swtich-case
        IFormatProvider<RadFlowDocument> fileFormatProvider;
        string extension = Path.GetExtension(fileName);
        switch (extension)
        {
            case ".docx":
                fileFormatProvider = new DocxFormatProvider();
                mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                break;
            case ".rtf":
                fileFormatProvider = new RtfFormatProvider();
                mimeType = "application/rtf";
                break;
            case ".html":
                fileFormatProvider = new HtmlFormatProvider();
                mimeType = "text/html";
                break;
            case ".txt":
                fileFormatProvider = new TxtFormatProvider();
                mimeType = "text/plain";
                break;
            case ".pdf":
                fileFormatProvider = new pdfProviderNamespace.PdfFormatProvider();
                mimeType = "application/pdf";
                break;
            default:
                fileFormatProvider = null!;
                mimeType = string.Empty;
                break;
        }

        if (fileFormatProvider == null)
        {
            throw new NotSupportedException("The chosen format cannot be exported with the supported providers.");
        }

        return fileFormatProvider;
    }

    public static class FileDownloader
    {
        public static async Task Save(IJSRuntime jsRuntime, byte[] byteData, string mimeType, string fileName)
        {
            if (byteData == null)
            {
                await jsRuntime.InvokeVoidAsync("alert", "The byte array provided for Exporting was Null.");
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("saveFile", Convert.ToBase64String(byteData), mimeType, fileName);
            }
        }
    }
}