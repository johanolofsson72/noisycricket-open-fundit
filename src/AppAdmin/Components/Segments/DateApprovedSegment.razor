@using System.Text.RegularExpressions
@inject SharedService SharedService

<style>
    .small-text {
        font-size: 12px;
    }
    .normal-text {
        font-size: 14px;
    }
</style>

<div class="application-segment">
    <label for="@Control.Id.ToString()" class="application-label">@(HideLabel ? "" : @Control.Labels[Index])<br/>
        <div class="application-sub-label" style="display: @ShowSubLabel">@Control.SubLabels[Index]</div>
        <div style="display: flex; flex-direction: row">
            <TelerikDatePicker Id="@Control.Id.ToString()" @bind-Value="Value" />
            <span>&nbsp;</span>
            <TelerikButton Enabled="@Enabled" Class='@(Control.Labels[Index].Length > 15 ? "small-text" : "normal-text")' OnClick="@ShowConfirmWithTitleAndButtons" ButtonType="ButtonType.Button" ThemeColor="@(Control.Color == "primary" ? ThemeConstants.Button.ThemeColor.Primary : (Control.Color == "success" ? ThemeConstants.Button.ThemeColor.Success : ThemeConstants.Button.ThemeColor.Error))" >@Control.Labels[Index]</TelerikButton>
        </div>
    </label>
</div>

@code 
{
    [CascadingParameter] private DialogFactory Dialogs { get; set; } = null!;
    [Parameter] public ApplicationControlDto Control { get; set; } = new();
    [Parameter] public EventCallback<ApplicationControlDto> OnControlChanged { get; set; }
    [Parameter] public bool HideLabel { get; set; } = false;
    private DateTime Value { get; set; } = DateTime.MinValue;
    private string ShowSubLabel => Control.SubLabels.Any(x => x.Length > 0) ? "block" : "none";
    private int Index { get; set; } = 0;
    private bool Enabled { get; set; } = true;

    protected override void OnInitialized()
    {
        Index = SharedService.IndexByCulture();
        if (Control.Labels.Count == 1) Index = 0;
        Control.Value = Regex.Unescape(Control.Value);
        if (!string.IsNullOrWhiteSpace(Control.Value))
        {
            Value = DateTime.Parse(Control.Value);
        }
        Enabled = true;
    }
    
    private async Task ShowConfirmWithTitleAndButtons()
    {
        if (Value < DateTime.UtcNow)
        {
            await Dialogs.AlertAsync(@LocalizationService.StringFromResource("Projects-113"), @LocalizationService.StringFromResource("Projects-114"), @LocalizationService.StringFromResource("Projects-115"));
            return;
        }
        if (Control.Confirm)
        {
            var isConfirmed = await Dialogs.ConfirmAsync(@LocalizationService.StringFromResource("Projects-108"), @LocalizationService.StringFromResource("Projects-107"), @LocalizationService.StringFromResource("Projects-106"), @LocalizationService.StringFromResource("Projects-105"));

            if (isConfirmed)
            {
                Enabled = false;
                await InvokeAsync(StateHasChanged);
                Control.Value = Value.ToString("yyyy-MM-dd");
                await OnControlChanged.InvokeAsync(Control);
                Enabled = true;
                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            Control.Value = Value.ToString("yyyy-MM-dd");
            await OnControlChanged.InvokeAsync(Control);
        }
        
    }

}