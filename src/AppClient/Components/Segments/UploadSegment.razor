@using System.Text.Json
@using System.Text.RegularExpressions
@inject IConfiguration Configuration
@inject SharedService SharedService

<div class="application-segment">
    <label for="@Control.Id.ToString()" class="application-label">@Control.Labels[Index]<br/>
        <div class="application-sub-label" style="display: @ShowSubLabel">@Control.SubLabels[Index]</div>
        <TelerikUpload SaveUrl="upload/save" Enabled="@Enabled"
                       AllowedExtensions="AllowedExtensions"
                       Files="Files"
                       RemoveUrl="upload/remove"
                       Multiple="true"
                       AutoUpload="true"
                       WithCredentials="true"
                       OnProgress="@OnUploadProgress"
                       OnUpload="OnUploadHandler"
                       OnRemove="OnRemoveHandler"
                       OnSuccess="OnUploadSuccess" 
                       OnError="OnUploadError" />
    </label>
</div>

@code 
{
    [Parameter] public ApplicationControlDto Control { get; set; } = new();
    [Parameter] public EventCallback<ApplicationControlDto> OnControlChanged { get; set; }
    [Parameter] public Guid ApplicationId { get; set; }
    [Parameter] public string TempPath { get; set; } = string.Empty;
    private string ShowSubLabel => Control.SubLabels.Any(x => x.Length > 0) ? "block" : "none";
    private List<string> AllowedExtensions { get; set; } = [".doc", ".docx", ".xls", ".xlsx", ".txt", ".pdf", ".rtf", ".jpg", ".png", ".jpeg", ".gif"];
    private List<UploadFileInfo>? Files { get; set; } = [];
    private int Index { get; set; } = 0;
    private bool Enabled { get; set; } = true;
    
    protected override async Task OnInitializedAsync()
    {
        Index = SharedService.IndexByCulture();
        if (Control.Labels.Count == 1) Index = 0;
        Control.Value = Regex.Unescape(Control.Value);
        if (!string.IsNullOrWhiteSpace(Control.Value))
        {
            Files = JsonSerializer.Deserialize<List<UploadFileInfo>>(Control.Value);
            await InvokeAsync(StateHasChanged);
        }
        Enabled = true;
    }

    private void OnUploadHandler(UploadEventArgs obj)
    {
        obj.RequestData.Add(TempPath, TempPath);
    }

    private void OnRemoveHandler(UploadEventArgs obj)
    {
        obj.RequestData.Add(TempPath, TempPath);
        obj.RequestData.Add(obj.Files.First().Name, obj.Files.First().Name);
    }
    
    private void OnUploadProgress(UploadProgressEventArgs args)
    {
        var fileName = args.Files.First().Name;
        var percentComplete = args.Progress;
    }
    
    private void OnUploadError(UploadErrorEventArgs args)
    {
        var fileName = args.Files.First().Name;
        var operation = args.Operation;
        var statusCode = args.Request.Status;
        var statusMessage = args.Request.StatusText;
        var customMessage = args.Request.ResponseText;
    }

    private async Task OnUploadSuccess(UploadSuccessEventArgs obj)
    {
        var fileName = obj.Files.First().Name;
        var filePath = Path.Combine(TempPath, fileName);
        var operation = obj.Operation;
        var statusCode = obj.Request.Status;
        var statusMessage = obj.Request.StatusText;
        var customMessage = obj.Request.ResponseText;
        
        Enabled = false;
        await InvokeAsync(StateHasChanged);

        if (statusCode == 200 && Files is not null)
        {
            Files.Add(obj.Files.First());
            Control.Value = JsonSerializer.Serialize(Files);
            await OnControlChanged.InvokeAsync(Control);
        }
        else if (statusCode == 201 && Files is not null)
        {
            Files = Files.Where(x => x.Id != obj.Files.First().Id).ToList();
            Control.Value = JsonSerializer.Serialize(Files);
            await OnControlChanged.InvokeAsync(Control);
        }
        Enabled = true;
        await InvokeAsync(StateHasChanged);
    }
}