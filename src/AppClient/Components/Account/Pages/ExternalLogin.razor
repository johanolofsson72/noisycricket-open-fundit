@page "/Account/ExternalLogin"

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject IEmailSender<User> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject UserService UserService
@inject OrganizationService OrganizationService

<PageTitle>@LocalizationService.StringFromResource("Account-15")</PageTitle>

<TelerikRootComponent>
    <div class="mt-8 mx-auto max-w-lg">
        <StatusMessage class="mb-3" Message="@message" />
        <Heading1>@LocalizationService.StringFromResource("Account-15")</Heading1>
        <Heading2 id="external-login-title">@LocalizationService.StringFromResource("Account-44") @ProviderDisplayName @LocalizationService.StringFromResource("Account-45")</Heading2>

        <Alert id="external-login-description" Type="AlertType.Information" class="my-4">
            @LocalizationService.StringFromResource("Account-46") <strong>@ProviderDisplayName</strong>.
            @LocalizationService.StringFromResource("Account-47")
        </Alert>

        <div class="mt-3 shadow overflow-hidden sm:rounded-md">
            <div class="px-4 bg-white dark:bg-black sm:p-6">
                <EditForm id="confirmation-form" Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="mb-3 text-danger text-center font-semibold" />

                    <div class="flex flex-col gap-4">
                        <div>
                            <label for="organizationNumber" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-134")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText type="text" id="organizationNumber" @bind-Value="Input.OrganizationNumber" class="@TextInput.InputClasses" autocomplete="organizationName" aria-required="true" placeholder="1231234567" />
                            </div>
                            <ValidationMessage For="() => Input.OrganizationNumber" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="organizationName" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-135")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText type="text" id="organizationName" @bind-Value="Input.OrganizationName" class="@TextInput.InputClasses" autocomplete="organizationName" aria-required="true" placeholder="Company AB" />
                            </div>
                            <ValidationMessage For="() => Input.OrganizationName" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="bankname" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-136")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText type="text" id="bankname" @bind-Value="Input.BankName" class="@TextInput.InputClasses" autocomplete="bankname" aria-required="true" placeholder="SEB" />
                            </div>
                            <ValidationMessage For="() => Input.BankName" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="accountNumber" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-137")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText type="text" id="accountNumber" @bind-Value="Input.AccountNumber" class="@TextInput.InputClasses" autocomplete="accountNumber" aria-required="true" placeholder="00 22 6754321" />
                            </div>
                            <ValidationMessage For="() => Input.AccountNumber" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="iban" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-138")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText type="text" id="iban" @bind-Value="Input.Iban" class="@TextInput.InputClasses" autocomplete="iban" aria-required="true" placeholder="SE876532109876353" />
                            </div>
                            <ValidationMessage For="() => Input.Iban" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="bic" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-139")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText type="text" id="bic" @bind-Value="Input.Bic" class="@TextInput.InputClasses" autocomplete="bic" aria-required="true" placeholder="BINAADADXXX" />
                            </div>
                            <ValidationMessage For="() => Input.Bic" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="firstname" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-17")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="firstname" type="text" @bind-Value="Input.FirstName" class="@TextInput.InputClasses" autocomplete="firstname" aria-required="true" placeholder="John" />
                            </div>
                            <ValidationMessage For="() => Input.FirstName" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="lastname" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-18")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="lastname" type="text" @bind-Value="Input.LastName" class="@TextInput.InputClasses" autocomplete="lastname" aria-required="true" placeholder="Doe" />
                            </div>
                            <ValidationMessage For="() => Input.LastName" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="address" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-140")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="address" type="text" @bind-Value="Input.Address" class="@TextInput.InputClasses" autocomplete="address" aria-required="true" placeholder="Lingonberry road 7" />
                            </div>
                            <ValidationMessage For="() => Input.Address" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="postalcode" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-141")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="postalcode" type="text" @bind-Value="Input.Postalcode" class="@TextInput.InputClasses" autocomplete="postalcode" aria-required="true" placeholder="372 73" />
                            </div>
                            <ValidationMessage For="() => Input.Postalcode" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="city" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-142")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="city" type="text" @bind-Value="Input.City" class="@TextInput.InputClasses" autocomplete="city" aria-required="true" placeholder="Torrevieja" />
                            </div>
                            <ValidationMessage For="() => Input.City" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="country" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-143")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="country" type="text" @bind-Value="Input.Country" class="@TextInput.InputClasses" autocomplete="country" aria-required="true" placeholder="Spain" />
                            </div>
                            <ValidationMessage For="() => Input.Country" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="phone" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-144")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="phone" type="text" @bind-Value="Input.PhoneNumber" class="@TextInput.InputClasses" autocomplete="phone" aria-required="true" placeholder="+46 709 161669" />
                            </div>
                            <ValidationMessage For="() => Input.PhoneNumber" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <label for="url" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-145")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="url" type="text" @bind-Value="Input.Url" class="@TextInput.InputClasses" autocomplete="url" aria-required="true" placeholder="https://www.funditbyus.com" />
                            </div>
                        </div>
                        <div>
                            <label for="email" class="@TextInput.LabelClasses">@LocalizationService.StringFromResource("Account-6")</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <InputText id="email" type="text" @bind-Value="Input.Email" class="@TextInput.InputClasses" autocomplete="email" placeholder="Please enter your email." />
                            </div>
                            <ValidationMessage For="() => Input.Email" class="mt-2 text-danger text-sm" />
                        </div>
                        <div>
                            <PrimaryButton type="submit">@LocalizationService.StringFromResource("Account-15")</PrimaryButton>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</TelerikRootComponent>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;
            
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // If the user does not have an account, then ask the user to create an account.
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var externalUserRegisteredResult = await UserService.ExternalUserRegisteredAsync(
            new ExternalUserRegisteredDto()
            {
                Email = Input.Email
            }, new CancellationToken());

        if (!externalUserRegisteredResult.IsOk)
        {
            message = "Error: User already registered.";
            return;
        }
        
        if (externalUserRegisteredResult.Value)
        {
            var existingUser = await UserService.GetUserAsync(0, Input.Email, Input.OrganizationNumber, new CancellationToken());
            if (!existingUser.IsOk || existingUser.Value.StatusId != 2)
            {
                message = "Error: User not found.";
                return;
            }

            var addExternalProviderResult = await UserService.AddExternalProviderAsync(
                new AddExternalProviderDto()
                {
                    Id = existingUser.Value.Id,
                    Provider = externalLoginInfo.LoginProvider,
                    ProviderKey = externalLoginInfo.ProviderKey
                }, new CancellationToken());

            if (!addExternalProviderResult.IsOk)
            {
                message = "Error: External provider not added.";
                return;
            }
            
            await SignInManager.SignInAsync(existingUser.Value, isPersistent: false, externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
            return;
        }
        
        var emailStore = GetEmailStore();
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var createdResult = await UserManager.CreateAsync(user);
        if (!createdResult.Succeeded)
        {
            message = $"Error: {string.Join(",", createdResult.Errors.Select(error => error.Description))}";
            return;
        }

        /*
        // Microsoft kod som av helt naturliga skäl inte fungerar, som vanligt!
        var addResult = await UserManager.AddLoginAsync(user, externalLoginInfo);
        if (!addResult.Succeeded)
        {
            message = $"Error: {string.Join(",", addResult.Errors.Select(error => error.Description))}";
            return;
        }
        */
        
        var registerResult = await UserService.RegisterClientUserAsync(
            new RegisterClientUserDto()
            {
                Id = user.Id,
                OrganizationId = 0,
                OrganizationName = Input.OrganizationName,
                OrganizationNumber = Input.OrganizationNumber,
                BankName = Input.BankName,
                AccountNumber = Input.AccountNumber,
                Iban = Input.Iban,
                Bic = Input.Bic,
                Address = Input.Address,
                Postalcode = Input.Postalcode,
                City = Input.City,
                Country = Input.Country,
                PhoneNumber = Input.PhoneNumber,
                Url = Input.Url,
                Email = Input.Email,
                FirstName = Input.FirstName,
                LastName = Input.LastName,
                Provider = externalLoginInfo.LoginProvider,
                ProviderKey = externalLoginInfo.ProviderKey
            }, new CancellationToken());
        if (!registerResult.IsOk)
        {
            message = "Error: User not registered.";
            return;
        }
        
        Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);
        
        NavigationManager.NavigateTo("/Account/RegisterOk");
    }

    private User CreateUser()
    {
        try
        {
            return Activator.CreateInstance<User>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(User)}'. " +
                $"Ensure that '{nameof(User)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<User> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<User>)UserStore;
    }

    private sealed class InputModel
    {
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Vat Number")]
        public string OrganizationNumber { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Organization")]
        public string OrganizationName { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Bank Name")]
        public string BankName { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Account Number")]
        public string AccountNumber { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Iban")]
        public string Iban { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Bic")]
        public string Bic { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Address")]
        public string Address { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Postal Code")]
        public string Postalcode { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "City")]
        public string City { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Country")]
        public string Country { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; } = string.Empty;
        [Display(Name = "Url")]
        public string Url { get; set; } = string.Empty;
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";
        
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";
        
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
    }
}
